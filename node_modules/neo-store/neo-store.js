//###################################################################################################
var self = null;
module.exports = {    
    //===============================================================================================
    
    //===============================================================================================
    // Name
    name: 'store',

    //===============================================================================================
    // Depends
    depends: [],    
    
    //===============================================================================================
    // Config
    config: [
        'file'
    ],
    
    //===============================================================================================
    // Properties
    properties: [
        "ueberDB",
        "util",
        'db'
    ],
    
    //===============================================================================================
    // Init
    init: function(ready) {        
        self = this;
        this.ueberDB = require('ueberDB');
        this.util = require('util');
        
        this.db = new this.ueberDB.database("sqlite", {filename: self.config.path+'/'+self.config.file});
        this.db.init(function(err) {
            if(err) {
                self.events.emit(self.name+'.error', 'Cant Init', err);
            } else {
                self.events.emit(self.name+'.ready');
            }
            ready();
        });
    },
    
    //===============================================================================================
    // Exit
    exit: function(ready) {
        var self = this;
        ready();
    },

    //===============================================================================================
    // Methods
    methods: [
    ],
    
    //===============================================================================================
    // Slots
    slots: [
        ////-----------------------------------------------------------------------------------------
        // Get an object ( or subobject )
        function get(path, callback) {
            var sub = path.split('.');
            
            if( sub.length > 0) {
                
                if( sub.length < 1) {
                    self.db.get(sub[0], function(err, value) {
                        if(err) {
                            console.log('storeHandler.get: '+err);
                            callback(undefined);
                        }
                        else {
                            callback(value);
                        }
                    });
                } 
                else {
                    self.db.getSub(sub[0], sub.slice(1), function(err, value) {
                        if(err) {
                            console.log('storeHandler.get: '+err);
                            callback(undefined);
                        }
                        else {
                            callback(value);
                        }
                    });
                }
            }
        },
        
        ////-----------------------------------------------------------------------------------------
        // Set an object ( or an subobjecct )
        function set(path, object, callback) {
            var sub = path.split('.');
            
            if( sub.length > 0) {
                
                if( sub.length < 2) {
                    self.db.set(sub[0], object);
                }
                else {
                    self.db.get(sub[0], function(err, data) {
                        if(!data || err) {
                            self.db.set(sub[0], {}, function(err) {
                                var subpath = sub.slice(1);
        
                                self.db.setSub(sub[0], subpath, object, function(err) {
                                    if(err)
                                        console.log('storeHandler.set: '+err);
                                    
                                    if( callback )
                                        callback(err);
                                });    
                            });
                        }
                        else {
                    
                            var subpath = sub.slice(1);
    
                            self.db.setSub(sub[0], subpath, object, function(err) {
                                if(err)
                                    console.log('storeHandler.set: '+err);
                                
                                if( callback )
                                    callback(err);
                            });           
                        }
                    });
                }
            }
        },
        
        ////-----------------------------------------------------------------------------------------
        // Remove an object
        function remove(name, callback) {
            self.db.remove(name, callback);
        }
    ],
    
    //===============================================================================================
    // Exports
    exports: [
    ]
    
    //===============================================================================================
};

//###################################################################################################
