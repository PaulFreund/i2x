//###################################################################################################
// XMPP Handler
/*
    Events:
    
    - message       (from, to, message)     : Simple text message
    - command       (from, to, message)     : Messages that begin with !
    - presence      (from, to, stanza)      : not ready yet
    - subscribe     (from)                  : Somebody want's to get Authorized
    - unsubscribe   (from)                  : Somebody removes you
    
    Commands;
    
    - send       (to, message)              : Send message to somebody 
    - subscribe  (to, message)              : Authorize somebody
    - unsubscribe(to, message)              : Remove somebody
    
*/

//###################################################################################################
// Create Function

module.exports.create = function(_events, _config) {
    return new Handler(_events, _config);
};

//###################################################################################################
// Basic Object
function Handler(_events, _config) {
    /////////////////////////////////////////////////////////////////////////////////////////////////
   
    var 
    ////=============================================================================================
    // Requirements
        
        xmpp = require('node-xmpp'),
        util = require('util'),
    
    ////=============================================================================================
    // Propertys

        name = 'xmpp',
        self = this,
        events,
        xmppServer,
        config,
        presence, 
    
    ////=============================================================================================
    // Methods
    
        ////-----------------------------------------------------------------------------------------
        // Initialize
        init = function(_events, _config) {
            if( _events !== undefined )
                events = _events;
            else
                console.error('['+name+']EventEmitter undefined');
            
            if( _config !== undefined )
                config = _config;
            else
                events.emit('error', name, 'Options undefined');
            
            xmppServer = new xmpp.Client( {
                jid     :config.jid,
                password:config.password,
                host    :config.host,
                port    :config.port
            });

            presence = new xmpp.Element('presence', {});

            // Events
            xmppServer.on('online', onOnline);
            xmppServer.on('error', onError);       
            xmppServer.on('stanza', onStanza);
            
            // Actions
            events.on(name, onEvent);

        },

        ////-----------------------------------------------------------------------------------------
        //  When the client is Ready and online, show presence
        onOnline = function() {
            xmppServer.send(presence.c('show').t('chat').up().c('status').t(''));
        },
        
        ////-----------------------------------------------------------------------------------------
        // If an error occurs
        onError = function(error) {
            console.log('ERROR: '+util.inspect(error));
        },
        
        ////-----------------------------------------------------------------------------------------
        // Stanza ( abstract message from server ) arrives
        onStanza = function(stanza) {
            try {
                if(stanza.attrs.type === 'error') {
                    events.emit('xmpp', 'error', 'stanza error');
                    onError('Stanza Error');
                }
                
                if (stanza.name === 'message') {
                    for(var child in stanza.children) {
                        if( stanza.children[child].name !== undefined ) {
                            if( stanza.children[child].name ==='body' ) {   
                                var body = stanza.children[child];
                                    
                                for(var item in body.children) {
                                    var message = body.children[item];
                                    
                                    if( message.charAt(0) === '!')
                                        events.emit('xmpp', 'command', stanza.attrs.from, stanza.attrs.to, message);                    
                                    else
                                        events.emit('xmpp', 'message', stanza.attrs.from, stanza.attrs.to, message);
                                }
                            }
                        }
                    }        
                }  
                     
                if( stanza.is('presence')) {
                    if( stanza.attrs.type == 'subscribe' ) {       
                        events.emit('xmpp','subscribe', stanza.attrs.from);
                    }
                    if( stanza.attrs.type == 'unsubscribe') {
                        events.emit('xmpp','unsubscribe', stanza.attrs.from);   
                    }
                    else {
                        events.emit('xmpp','presence', stanza.attrs.from, stanza.attrs.to, stanza);
                    }
                }
            }
            catch( err )
            {
                console.log('ERROR: '+util.inspect(err)+'\nStanza: '+util.inspect(stanza));
            }
        },
                
        ////-----------------------------------------------------------------------------------------
        // Decide which function should handle the event
        onEvent = function(type) {
            try {
                var args = Array.prototype.slice.call(arguments, 1);
            
                switch(type) {
                case 'send':
                    send.apply(this,args);
                    break;
                case 'subscribed':
                    subscribed.apply(this,args);
                    break;
                case 'unsubscribed':
                    unsubscribed.apply(this,args);
                    break;
                }
            }
            catch( err )
            {
                events.emit(name, 'error', err);
            }
        },
        
        ////-----------------------------------------------------------------------------------------
        // Send a message to a contact
        send = function(outto, message) {
            var out = new xmpp.Element('message', {
                to: outto,
                type: 'chat'
            });
            
            var body = out.c('body');
            body.t(message);
            
            xmppServer.send(out);
        },
        
        ////-----------------------------------------------------------------------------------------
        // Add a contact
        subscribed = function(to) {
            var out = new xmpp.Element('presence', {
                to: to,
                from: config.jid,
                type: 'subscribed'
            });
            xmppServer.send(out);
            xmppServer.send(presence.c('show').t('chat').up().c('status').t(''));
        },
        
        ////-----------------------------------------------------------------------------------------
        // Remove a contact
        unsubscribed = function(to) {
            var out = new xmpp.Element('presence', {
                to: to,
                from: config.jid,
                type: 'unsubscribed'
            });
            xmppServer.send(out);     
            xmppServer.send(presence.c('show').t('chat').up().c('status').t(''));
        }
        

    ////=============================================================================================
    ;

    /////////////////////////////////////////////////////////////////////////////////////////////////

    init(_events, _config);
    
    /////////////////////////////////////////////////////////////////////////////////////////////////
}
