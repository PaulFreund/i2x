//###################################################################################################
// Create Function

module.exports.create = function(_config) {
    return new Handler(_config);
};

//###################################################################################################
// Basic Object
function Handler(_config) {
    /////////////////////////////////////////////////////////////////////////////////////////////////
   
    var 
    ////=============================================================================================
    // Requirements
        
        events = require('events'),
        xmpp = require('node-xmpp'),
    
    ////=============================================================================================
    // Propertys

        self = this,
        xmppServer,
        config,
        presence, 
    
    ////=============================================================================================
    // Methods
    
        ////-----------------------------------------------------------------------------------------
        // Function
        init = function(_config) {
            
            if( _config !== undefined )
                config = _config;
            else
                console.error('[xmppHandler] Options undefined');
            
            events.EventEmitter.call(this);
            
            xmppServer = new xmpp.Client( {
                jid     :config.jid,
                password:config.password,
                host    :config.host,
                port    :config.port
            });

            xmppServer.on('online', onOnline);
            xmppServer.on('error', onError);       
            xmppServer.on('stanza', onStanza);
            
            presence = new xmpp.Element('presence', {});
            
            self.on('send', send);
        },
        
        onOnline = function() {
            xmppServer.send(presence.c('show').t('chat').up().c('status').t('')
		 );
        },
        
        onError = function(error) {
            console.log('Error: '+error);
        },
        
        onStanza = function(stanza) {
            if(stanza.attrs.type === 'error')
                onError('Stanza Error');
            
            if (stanza.is('message'))
                onMessage(stanza);
        },
        
        onMessage = function(stanza) {
            var inmsg = stanza.children[0].children[0];
            self.emit('message', stanza.attrs.from, stanza.attrs.to, inmsg);
        },
        
        send = function(message) {
            var out = new xmpp.Element('message', {
                to: config.admin,
                type: 'chat'
            });
            
            var body = out.c('body');
            body.t(message);
            
            xmppServer.send(out);
        }
        

    ////=============================================================================================
    ;

    /////////////////////////////////////////////////////////////////////////////////////////////////

    init(_config);
    
    /////////////////////////////////////////////////////////////////////////////////////////////////
}

//###################################################################################################
// Inherit from EventEmitter

events = require('events');
Handler.super_ = events.EventEmitter;
Handler.prototype = Object.create(events.EventEmitter.prototype, {
    constructor: {
        value: Handler,
        enumerable: false
    }   
});
