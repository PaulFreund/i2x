//###################################################################################################
// XMPP Handler
/*
    Events:
    
    - message       (from, to, message)     : Simple text message
    - command       (from, to, message)     : Messages that begin with !
    - presence      (from, to, stanza)      : not ready yet
    - subscribe     (from)                  : Somebody want's to get Authorized
    - unsubscribe   (from)                  : Somebody removes you
    
    Commands;
    
    - send       (to, message)              : Send message to somebody 
    - subscribe  (to, message)              : Authorize somebody
    - unsubscribe(to, message)              : Remove somebody
    
*/

//###################################################################################################
// Create Function

module.exports.create = function(_config) {
    return new Handler(_config);
};

//###################################################################################################
// Basic Object
function Handler(_config) {
    /////////////////////////////////////////////////////////////////////////////////////////////////
   
    var 
    ////=============================================================================================
    // Requirements
        
        events = require('events'),
        xmpp = require('node-xmpp'),
        util = require('util'),
    
    ////=============================================================================================
    // Propertys

        self = this,
        xmppServer,
        config,
        presence, 
    
    ////=============================================================================================
    // Methods
    
        ////-----------------------------------------------------------------------------------------
        // Initialize
        init = function(_config) {
            
            if( _config !== undefined )
                config = _config;
            else
                console.error('[xmppHandler] Options undefined');
            
            events.EventEmitter.call(this);
            
            xmppServer = new xmpp.Client( {
                jid     :config.jid,
                password:config.password,
                host    :config.host,
                port    :config.port
            });

            // Events
            xmppServer.on('online', onOnline);
            xmppServer.on('error', onError);       
            xmppServer.on('stanza', onStanza);
            
            // Actions
            self.on('send', send);
            self.on('subscribe', subscribe);
            self.on('unsubscribe', unsubscribe);

            presence = new xmpp.Element('presence', {});
        },
        
        ////-----------------------------------------------------------------------------------------
        //  When the client is Ready and online, show presence
        onOnline = function() {
            xmppServer.send(presence.c('show').t('chat').up().c('status').t('')
		 );
        },
        
        ////-----------------------------------------------------------------------------------------
        // If an error occurs
        onError = function(error) {
            console.log('Error: '+error);
        },
        
        ////-----------------------------------------------------------------------------------------
        // Stanza ( abstract message from server ) arrives
        onStanza = function(stanza) {
            if(stanza.attrs.type === 'error') {
                self.emit('error', 'stanza error');
                onError('Stanza Error');
            }
            
            if (stanza.is('message')) {
                var message = stanza.children[0].children[0];
        
                if( message.charAt(0) === '!')
                    self.emit('command', stanza.attrs.from, stanza.attrs.to, message);                    
                else
                    self.emit('message', stanza.attrs.from, stanza.attrs.to, message);
            }  
                 
            if( stanza.is('presence')) {
                if( stanza.attrs.type == 'subscribe' ) {       
                    self.emit('subscribe', stanza.attr.from);
                }
                if( stanza.attrs.tpe == 'unsubscribe') {
                    self.emit('unsubscribe', stanza.attr.from);   
                }
                else {
                    console.log(util.inspect(stanza));
                    self.emit('presence', stanza.attrs.from, stanza.attrs.to, stanza);
                }
            }
        },
                
        ////-----------------------------------------------------------------------------------------
        // Send a message to a contact
        send = function(to, message) {
            var out = new xmpp.Element('message', {
                to: config.admin,
                type: 'chat'
            });
            
            var body = out.c('body');
            body.t(message);
            
            xmppServer.send(out);
        },
        
        ////-----------------------------------------------------------------------------------------
        // Add a contact
        subscribe = function(to) {
            var out = new xmpp.Element('presence', {
                to: to,
                from: config.jid,
                type: 'subscribed'
            });
            xmppServer.send(out);
        },
        
        ////-----------------------------------------------------------------------------------------
        // Remove a contact
        unsubscribe = function(to) {
            var out = new xmpp.Element('presence', {
                to: to,
                from: config.jid,
                type: 'unsubscribed'
            });
            xmppServer.send(out);            
        }
        

    ////=============================================================================================
    ;

    /////////////////////////////////////////////////////////////////////////////////////////////////

    init(_config);
    
    /////////////////////////////////////////////////////////////////////////////////////////////////
}

//###################################################################################################
// Inherit from EventEmitter

events = require('events');
Handler.super_ = events.EventEmitter;
Handler.prototype = Object.create(events.EventEmitter.prototype, {
    constructor: {
        value: Handler,
        enumerable: false
    }   
});
