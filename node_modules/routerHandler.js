//###################################################################################################
// Create Function

module.exports.create = function(_events, _config) {
    return new Handler(_events, _config);
};

//###################################################################################################
// Basic Object
function Handler(_events, _config) {
    /////////////////////////////////////////////////////////////////////////////////////////////////
   
    var 
    ////=============================================================================================
    // Requirements
    
    ////=============================================================================================
    // Propertys
    
        name = 'router',
        self = this,
        config,
        events,
        nicklist,
    
    ////=============================================================================================
    // Methods
    
        ////-----------------------------------------------------------------------------------------
        // Initialize
        init = function(_events, _config) {
            if( _events !== undefined )
                events = _events;
            else
                console.error('['+name+']EventEmitter undefined');
            
            if( _config !== undefined )
                config = _config;
            else
                events.emit('error', name, 'Options undefined');
                        
            events.on('irc', onIRC);
            events.on('xmpp', onXMPP);
            events.on(name, onEvent);
        },

        ////-----------------------------------------------------------------------------------------
        // IRC Message        
        onIRC = function(type) {
            switch(type) {
                
            case 'command':
            case 'message':
                var from = arguments[1],
                    to = arguments[2],
                    message = arguments[3];
                
                // From Chan
                if(to === config.irc.channel) {
                    pushXMPP(from+': '+message);
                }
                else {
                    events.emit('irc', 'say', from, 'I\'m sorry, no Priv MSG avalible');
                }
                break;
            case 'join':
            case 'part':
            case 'kick':
                var channel = arguments[1],
                    nick = arguments[2];
                pushXMPP('['+type+']'+nick);
                break;
            case 'nick':
                var oldnick = arguments[1],
                    newnick = arguments[2],
                    channel = arguments[3];
                pushXMPP('['+type+']From: '+oldnick+' To: '+newnick);
                break;
            case 'topic':
                var chanenel = arguments[1],
                    topic = arguments[2],
                    nick = arguments[3];
                pushXMPP('['+type+']'+topic);
                break;
            case 'names':
                var channel = arguments[1],
                    names = arguments[2];
                nicklist = names;
                break;
            }
        },
        
        ////-----------------------------------------------------------------------------------------
        // XMPP Message
        onXMPP = function(type) {
            switch(type) {
            case 'message':
                var from = arguments[1].split("/")[0],
                    to = arguments[2].split("/")[0],
                    message = arguments[3];

                // Get Users
                events.emit('store', 'get', 'users', function(users) {
                    for(var user in users) {
                        if(users.hasOwnProperty(user)) {
                            if( users[user].jid === from ) {
                                pushIRC(from+': '+message);
                            }
                        }
                    }
                });                
                
                break;
            case 'command':
                var from = arguments[1].split("/")[0],
                    to = arguments[2].split("/")[0],
                    command = arguments[3].substr(1);
                if( from === config.xmpp.admin ) {
                    var args = command.split(' ');
        
                    switch(args[0]) {
                    
                    case 'useradd':
                        events.emit('store', 'set', 'users.'+args[1], {jid: args[2]});
                        break;
                    case 'userdel':
                        events.emit('store', 'set','users.'+args[1], undefined);
                        break;
                    case 'userlist':
                        events.emit('store', 'get', 'users', function(users) {
                            var userlist = '';
                            for(var user in users) {
                                if(users.hasOwnProperty(user)) {
                                    userlist = userlist+user+' ';
                                }
                            events.emit('xmpp', 'send', from, userlist);
                            }
                        }); 
                        break;

                    }
                }
                
                // Get Users
                events.emit('store', 'get', 'users', function(users) {
                    for(var user in users) {
                        if(users.hasOwnProperty(user)) {
                            if( users[user].jid === from ) {
                                var args = command.split(' ');

                                switch(args[0]) {
                                case 'join':
                                    events.emit('store', 'set', 'users.'+user+'.listening', true);
                                    break;
                                case 'part':
                                    events.emit('store', 'set', 'users.'+user+'.listening', false);
                                    break;
                                }
                                
                                pushIRC(from+' '+args[0]+'\'ed');
                            }
                        }
                    }
                });
                break;
                
            case 'presence':
                var from = arguments[1],
                    to = arguments[2],
                    stanza = arguments[3];

                break;
            case 'subscribe':
                var from = arguments[1];

                break;
            case 'unsubscribe':
                var from = arguments[1];

                break;
            }
        },
        
        ////-----------------------------------------------------------------------------------------
        // Send message from IRC to all Users
        pushXMPP = function(message) {
            var now = Date.now();
            
            // Log
            events.emit('store', 'set', 'log'+'.'+now, message);
            
            // Get Users
            events.emit('store', 'get', 'users', function(users) {
                for(var user in users) {
                    if(users.hasOwnProperty(user)) {
                        // Is Online and listening
                        if( users[user].listening  === true ) {
                                
                            events.emit('xmpp', 'send', users[user].jid, message);
                            users[user].last = now;
                        }
                    }                            
                }
            });
        },

        ////-----------------------------------------------------------------------------------------
        // Send message from IRC to all Users
        pushIRC = function(message) {
            events.emit('irc', 'say', config.irc.channel, message);
        },

        ////-----------------------------------------------------------------------------------------
        // Decide which function should handle the event
        onEvent = function(type) {
            var args = Array.prototype.slice.call(arguments, 1);
            
            try {
                switch(type) {
                }
            }
            catch( err )
            {
                events.emit('error', name, err);   
            }
        }

    ////=============================================================================================
    ;

    /////////////////////////////////////////////////////////////////////////////////////////////////

    init(_events, _config);
    
    /////////////////////////////////////////////////////////////////////////////////////////////////
}

