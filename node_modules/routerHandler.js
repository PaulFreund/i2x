//###################################################################################################
// Create Function

module.exports.create = function(_events, _config) {
    return new Handler(_events, _config);
};

//###################################################################################################
// Basic Object
function Handler(_events, _config) {
    /////////////////////////////////////////////////////////////////////////////////////////////////
   
    var 
    ////=============================================================================================
    // Requirements
        
        util = require('util'),
    
    ////=============================================================================================
    // Propertys
    
        name = 'router',
        self = this,
        config,
        events,
        nicklist,
        onlineusers = {},
    
    ////=============================================================================================
    // Methods
    
        ////-----------------------------------------------------------------------------------------
        // Initialize
        init = function(_events, _config) {
            if( _events !== undefined )
                events = _events;
            else
                console.error('['+name+']EventEmitter undefined');
            
            if( _config !== undefined )
                config = _config;
            else
                events.emit('error', name, 'Options undefined');
                        
            events.on('irc', onIRC);
            events.on('xmpp', onXMPP);
            events.on(name, onEvent);
            
            events.emit('xmpp', 'command', config.xmpp.admin, config.xmpp.admin, '!useradd '+config.xmpp.admin);

        },

        ////-----------------------------------------------------------------------------------------
        // IRC Message        
        onIRC = function(type) {
            var channel, nick;
            switch(type) {
                
            case 'command':
            case 'message':
                var from = arguments[1],
                    to = arguments[2],
                    message = arguments[3];
                
                // From Chan
                if(to === config.irc.channel) {
                    pushXMPP(from+': '+message);
                }
                else {
                    events.emit('irc', 'say', from, 'I\'m sorry, no Priv MSG avalible');
                }
                break;
            case 'quit':
            case 'join':
            case 'part':
            case 'kick':
                channel = arguments[1];
                nick = arguments[2];
                pushXMPP('['+type+']'+nick);
                break;
            case 'nick':
                var oldnick = arguments[1],
                    newnick = arguments[2];
                channel = arguments[3];
                pushXMPP('['+type+']From: '+oldnick+' To: '+newnick);
                break;
            case 'topic':
                channel = arguments[1];
                nick = arguments[3];
                var topic = arguments[2];
                pushXMPP('['+type+']'+topic);
                break;
            case 'names':
                var names = arguments[2];
                channel = arguments[1];
                nicklist = names;
                break;
            }
        },
        
        ////-----------------------------------------------------------------------------------------
        // XMPP Message
        onXMPP = function(type) {
            var from, to, message, command, bare, resource, index;
            
            switch(type) {
            case 'message':
                if( arguments[1] !== undefined )
                    from = jidToBare(arguments[1]);
                if( arguments[2] !== undefined )
                    to = jidToBare(arguments[2]);
                if( arguments[3] !== undefined )
                    message = arguments[3];
                    
                onXMPPMessage(type, from, to, message);
                break;
            case 'command':
                if( arguments[1] !== undefined )
                    from = jidToBare(arguments[1]);
                if( arguments[2] !== undefined )
                    to = jidToBare(arguments[2]);
                if( arguments[3] !== undefined )
                    command = arguments[3].substr(1);
                    
                if( from === config.xmpp.admin ) {
                    onXMPPAdminCommand(from, to, command);
                }
                
                onXMPPCommand(from, to, command);
                break;
            
            case 'online':
                if( arguments[1] !== undefined ) {
                    from = arguments[1];
                    bare = jidToBare(arguments[1]);
                    resource = arguments[1].split("/")[1];
                    index = jidToIndex(bare);
                }
                
                if( onlineusers[index] === undefined ) {
                    onlineusers[index] = {
                        jid: bare,
                        resources: []
                    };
                }
                    
                onlineusers[index].resources[resource] = true;
                
                getUserByJID(bare, function(key, user) {
                    if( user !== undefined ) {
                        if( user.listening === true ) {
                            //pushBacklog(bare);
                        }
                    }
                });
                
                break;
                
            case 'offline':
                if( arguments[1] !== undefined ) {
                    from = arguments[1];
                    bare = jidToBare(arguments[1]);
                    resource = arguments[1].split("/")[1];
                    index = jidToIndex(bare);
                }
                
                if( onlineusers[index] === undefined ) {
                    onlineusers[index] = {
                        jid: bare,
                        resources: []
                    };
                }
                    
                onlineusers[index].resources[resource] = false;           
                            
                break;
            
            case 'presence':
                if( arguments[1] !== undefined ) {
                    from = arguments[1];
                    bare = jidToBare(arguments[1]);
                    to = arguments[1];
                }
               if( arguments[3] !== undefined ) 
                    stanza = arguments[3];
                    
                // Nothing to do atm
                
                break;
                
            case 'subscribe':
                if( arguments[1] !== undefined )
                    from = jidToBare(arguments[1]);
                getUserByJID(from, function(key, user) {
                    if( user !== undefined ) {
                        events.emit('xmpp', 'subscribed', from);
                        events.emit('xmpp', 'dosubscribe', from);
                    }
                });
                break;
                
            case 'unsubscribe':
                if( arguments[1] !== undefined )
                    from = jidToBare(arguments[1]);
                getUserByJID(from, function(key, user) {
                    if( user !== undefined ) {
                        events.emit('xmpp', 'unsubscribed', from);
                        events.emit('xmpp', 'dounsubscribe', from);
                    }
                });
                break;
                
            }
        },
        
        ////-----------------------------------------------------------------------------------------
        // Message from XMPP
        onXMPPMessage = function(type, from, to, message) {
            getUserByJID(from, function(key, user) {
                if( user !== undefined ) {
                    var sender = from;
                    if( user.nick !== undefined)
                        sender = user.nick;
                        
                    if( user.listening !== true)
                        events.emit('xmpp','send',from,'You have to !join the room to write to it!');
                    else
                        pushIRC(sender+': '+message, from);
                }
            });
        },
        
        ////-----------------------------------------------------------------------------------------
        // Administrator commands
        onXMPPAdminCommand = function(from, to, command) {
            var args = command.split(' ');

            switch(args[0]) {
            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
            case 'deleteuserdata':
                events.emit('store', 'remove', 'users');
                events.emit('xmpp', 'send', from, '[USR]Deleted all users');
                break;
                
            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
            case 'useradd':
                var addjid = args[1];
                getUserByJID(addjid, function(key, user) {
                    if(user) {
                        events.emit('xmpp', 'send', from, '[USR]User already exists');
                    }
                    else {
                        events.emit('store', 'set', 'users.'+jidToIndex(addjid), {"jid": addjid});
                        events.emit('xmpp', 'send', from, '[USR]'+addjid+' added');
                        events.emit('xmpp', 'dosubscribe', addjid);
                    }
                });
                break;
            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
            case 'userdel':
                var deljid = args[1];
                getUserByJID(deljid, function(key, user) {
                    if(user === undefined) {
                        events.emit('xmpp', 'send', from, '[USR]User does not exists');
                    }
                    else {
                        getUsers(function(users) {
                            if( users !== undefined ) {
                                for(var user in users) {
                                    if(users.hasOwnProperty(user)) {
                                        if( users[user].jid === deljid      || 
                                            users[user].jid === undefined   ) {
                                            users[user] = {};
                                            delete users[user];
                                            events.emit('xmpp','send',from,'[USR]'+deljid+' deleted');
                                            events.emit('xmpp', 'dounsubscribe', deljid);
                                        }
                                    }
                                }
                                setUsers(users);
                            }
                        });
                    }
                });
                break;
                
            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
            case 'userlist':
                getUsers(function(users) {
                    var found = false;
                    for(var user in users) {
                        if(users.hasOwnProperty(user)) {
                            found = true;
                            events.emit('xmpp', 'send', from, '[USR]'+users[user].jid);    
                        }
                    }
                    if( !found )
                        events.emit('xmpp', 'send', from, '[USR] No Users');
                }); 
                break;
            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
            case 'userreauth':
                getUsers(function(users) {
                    var found = false;
                    for(var user in users) {
                        if(users.hasOwnProperty(user) && users[user].jid !== undefined) {
                            found = true;
                            events.emit('xmpp', 'dosubscribe', users[user].jid);    
                            events.emit('xmpp', 'send', from, '[USR]Auth Send to '+users[user].jid);    

                        }
                    }
                    if( !found )
                        events.emit('xmpp', 'send', from, '[USR] No Users');
                }); 
                break;

            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
            case 'userdb':
                getUsers(function(users) {
                    events.emit('xmpp', 'send', from, '[USR]' + util.inspect(users));
                }); 
                break;                        
            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
            case 'usersonline':
                events.emit('xmpp', 'send', from, util.inspect(onlineusers));
                break;
            
            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
            case 'help':
                    events.emit('xmpp', 'send', from, 'Admin Commands: ');
                    events.emit('xmpp', 'send', from, '!deleteuserdata - Deletes all user data');
                    events.emit('xmpp', 'send', from, '!useradd jid - Add the user with the given jid');
                    events.emit('xmpp', 'send', from, '!userdel jid - Remove the user with the given jid');
                    events.emit('xmpp', 'send', from, '!userlist - Print list of users registered');
                    events.emit('xmpp', 'send', from, '!userreauth - Subscription refresh for all users');
                    events.emit('xmpp', 'send', from, '!usersonline - Debug: Print all online user objects');
                    events.emit('xmpp', 'send', from, '!userdb - Debug: Print all user objects');
                    break;

            }
        },     
        
        ////-----------------------------------------------------------------------------------------
        // User commands
        onXMPPCommand = function(from, to, command) {
            getUserByJID(from, function(key, user) {
                var args = command.split(' ');

                switch(args[0]) {
                case 'join':
                    events.emit('store', 'set', 'users.'+key+'.listening', true);
                    pushIRC(from+' '+args[0]+'\'ed');
                    break;
                    
                case 'part':
                    events.emit('store', 'set', 'users.'+key+'.listening', false);
                    pushIRC(from+' '+args[0]+'\'ed');
                    break;
                
                case 'nick':
                    var nick = args[1];
                    getUsers(function(users) {
                        var found = false;
                        for(var inuser in users) {
                            if(users.hasOwnProperty(inuser)) {    
                                if( users[inuser].nick === nick )
                                    found = true;
                            }
                        }
                        
                        if(!found) {
                            events.emit('store', 'set', 'users.'+key+'.nick', nick);
                            events.emit('xmpp', 'send', from, 'Nick set to '+nick);
                        }
                        else {
                            events.emit('xmpp', 'send', from, 'Nick already taken!');
                        }
                    });
                    break;
                    
                case 'highlight':
                    var newval = args[1];
                    if( newval === '1' ) {
                        events.emit('store', 'set', 'users.'+key+'.highlight', true);
                        events.emit('xmpp', 'send', from, 'Nick highlight enabled');
                    } 
                    else if( newval === '0' ) {
                        events.emit('store', 'set', 'users.'+key+'.highlight', false);
                        events.emit('xmpp', 'send', from, 'Nick highlight disabled');
                    }
                    break;
                    
                case 'names':
                    if(nicklist !== undefined) {
                        var nickstr = '';
                        for(var item in nicklist)
                            nickstr = nickstr+' '+item;
                            
                        events.emit('xmpp', 'send', from, 'Names: '+nickstr);

                    }
                    break;
                    
                case 'backlog':
                    pushBacklog(from);
                    break;
                
                case 'help':
                    events.emit('xmpp', 'send', from, 'User Commands: ');
                    events.emit('xmpp', 'send', from, '!join - Start listening to IRC Messages');
                    events.emit('xmpp', 'send', from, '!part - Stop listening to IRC Messages');
                    events.emit('xmpp', 'send', from, '!nick Newnick - Change nick to NewNick');
                    events.emit('xmpp', 'send', from, '!names - Print list of users in channel');
                    events.emit('xmpp', 'send', from, '!backlog - Return link to the backlog');
                    break;
                }
            });
        },
                
        ////-----------------------------------------------------------------------------------------
        // Send message from IRC to all Users
        pushXMPP = function(message, exclude) {
            if( message !== undefined ) {
                var now = Date.now();
                
                // Log
                events.emit('log', 'message', now, message);
                
                // Get Users
                getUsers( function(users) {
                    for(var user in users) {
                        if(users.hasOwnProperty(user)) {
                            // Is Online and listening
                            if( exclude !== undefined ) {
                                if( users[user].jid === exclude ) {
                                    continue;
                                }
                            }
                            
                            if( users[user].listening  === true && 
                                isOnline(users[user].jid)       ) {
    
                                events.emit('xmpp', 'send', users[user].jid, message);
                                users[user].last = now;
                            }
                            else if(users[user].nick !== undefined &&
                                    users[user].highlight !== undefined &&
                                    users[user].highlight === true) {
                                            
                                if( message.toLowerCase().search( users[user].nick.toLowerCase()) !== -1 ) {
                                    events.emit('xmpp', 'send', users[user].jid, '[HIGHLIGHT]'+message);
                                    users[user].last = now;
                                }                                        
                            }
                        }                            
                    }
                });
            }
        },

        ////-----------------------------------------------------------------------------------------
        // Send message from IRC to all Users
        pushIRC = function(message, exclude) {
            events.emit('irc', 'say', config.irc.channel, message);
            pushXMPP(message, exclude);
        },
        
        ////-----------------------------------------------------------------------------------------
        // Send the backlog of the user
        pushBacklog = function(jid) {
            getUserByJID(jid, function(key, user) {
                if( user !== undefined ) {
                    if( user.last !== undefined) {
                        var last = user.last;
                        
                        events.emit('store', 'get', 'log', function(log) {
                            var sent = false;
                            var counter = 0;
                            var message;
                            var item = last;
                            for( item in log ) {
                                if( counter < 49 ) {
                                    message = message + log[item] +'\n';
                                    counter++;
                                }
                                else {
                                    events.emit('xmpp', 'send', jid, message);
                                    message = '';
                                    counter = 0;
                                    sent = true;
                                }
                            }
                            if( counter > 0 )
                                events.emit('xmpp', 'send', jid, message);
                            
                            if( counter === 0 && sent === false )
                                events.emit('xmpp', 'send', jid, 'No messages in backlog');
                            
                        });
                    }
                }
            });
        },
    
        ////-----------------------------------------------------------------------------------------
        // Return user object of the specified jid 
        getUserByJID = function(jid, callback) {
            var index = jidToIndex(jid);
            events.emit('store', 'get', 'users.'+index, function(user) {
                if( user !== undefined &&
                    user !== null ) {
                    callback(index, user);
                }
                else {
                    callback(undefined, undefined);
                }
            });
        },
        
        ////-----------------------------------------------------------------------------------------
        // Return users object
        getUsers = function(callback) {
            events.emit('store', 'get', 'users', function(users) {
                if( users !== undefined )
                    callback(users);
                else
                    callback(undefined);
            });
        },
        
        ////-----------------------------------------------------------------------------------------
        // Is the user online ( with at least one resource )
        isOnline = function(jid) {
            var bare = jidToBare(jid);
            var index = jidToIndex(bare);
            found = false;
            
            if( onlineusers[index] !== undefined ) {            
                for( var resource in onlineusers[index].resources ) {
                    if( onlineusers[index].resources[resource] === true) {
                        found = true;
                    }
                }
            }
            
            return found;
        },

        ////-----------------------------------------------------------------------------------------
        // Store users object
        setUsers = function(users, callback) {
            if( users !== undefined ) {
                events.emit('store', 'remove', 'users', function() {
                    events.emit('store', 'set', 'users', users, function() {
                        if( callback )
                            callback();
                    });
                });
            }
        },
        
        ////-----------------------------------------------------------------------------------------
        // Return the Index of the JID ( jid without '.' chars )
        jidToIndex = function(jid) {
            var jidarr = jid.split("."),
                index = '';
                
            for( var item in jidarr )
                index = index + jidarr[item];
                
            return index;
        },
        
        ////-----------------------------------------------------------------------------------------
        // Return the bare jid ( without resouce )
        jidToBare = function(jid) {
            return jid.split("/")[0];
        },
        
        ////-----------------------------------------------------------------------------------------
        // Decide which function should handle the event
        onEvent = function(type) {
            var args = Array.prototype.slice.call(arguments, 1);
            
            try {
                switch(type) {
                }
            }
            catch( err )
            {
                events.emit('error', name, err);   
            }
        }

    ////=============================================================================================
    ;

    /////////////////////////////////////////////////////////////////////////////////////////////////

    init(_events, _config);
    
    /////////////////////////////////////////////////////////////////////////////////////////////////
}

