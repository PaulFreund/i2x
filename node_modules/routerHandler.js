//###################################################################################################
// Create Function

module.exports.create = function(_config, _store) {
    return new Handler(_config, _store);
};

//###################################################################################################
// Basic Object
function Handler(_config, _store) {
    /////////////////////////////////////////////////////////////////////////////////////////////////
   
    var 
    ////=============================================================================================
    // Requirements
    
    ////=============================================================================================
    // Propertys
    
        self = this,
        config,
        store,
    
    ////=============================================================================================
    // Methods
    
        ////-----------------------------------------------------------------------------------------
        // Initialize
        init = function(_config, _store) {
            
            if( _config !== undefined )
                config = _config;
            else
                console.error('Options undefined');
            
            if( _store !== undefined )
                store = _store;
            else
                console.error('Store undefined');
            
            events.EventEmitter.call(this);
                        
            self.on('message', onMessage);
            self.on('event', onEvent);
            self.on('presence', onPresence);
            self.on('subscribe', onSubscribe);
            self.on('unsubscribe', onUnsubscribe);
        },

        ////-----------------------------------------------------------------------------------------
        // IRC Message        
        onMessage = function(proto, from, to, message) {
            
            if( proto === 'irc' ) {
                logstring = '[IRC] '+ from +': ' + message;
                store.emit('set', 'log'+'.'+Date.now(), logstring);
                self.emit('send', 'xmpp', from+': '+message);
            }
            else if( proto === 'xmpp' ) {
                logstring = '[JAB] '+ from +': ' + message;
                store.emit('set', 'log'+'.'+Date.now(), logstring);
                self.emit('say', message);

            }
        }
        
        ////-----------------------------------------------------------------------------------------
        // XMPP Message




    ////=============================================================================================
    ;

    /////////////////////////////////////////////////////////////////////////////////////////////////

    init(_config, _store);
    
    /////////////////////////////////////////////////////////////////////////////////////////////////
}

//###################################################################################################
// Inherit from EventEmitter

events = require('events');
Handler.super_ = events.EventEmitter;
Handler.prototype = Object.create(events.EventEmitter.prototype, {
    constructor: {
        value: Handler,
        enumerable: false
    }   
});
