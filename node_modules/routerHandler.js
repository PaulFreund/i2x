//###################################################################################################
// Create Function

module.exports.create = function(_events, _config) {
    return new Handler(_events, _config);
};

//###################################################################################################
// Basic Object
function Handler(_events, _config) {
    /////////////////////////////////////////////////////////////////////////////////////////////////
   
    var 
    ////=============================================================================================
    // Requirements
        
        util = require('util'),
    
    ////=============================================================================================
    // Propertys
    
        name = 'router',
        self = this,
        config,
        events,
        nicklist,
        onlineusers = {},
    
    ////=============================================================================================
    // Methods
    
        ////-----------------------------------------------------------------------------------------
        // Initialize
        init = function(_events, _config) {
            if( _events !== undefined )
                events = _events;
            else
                console.error('['+name+']EventEmitter undefined');
            
            if( _config !== undefined )
                config = _config;
            else
                events.emit('error', name, 'Options undefined');
                        
            events.on('irc', onIRC);
            events.on('xmpp', onXMPP);
            events.on(name, onEvent);
            
            events.emit('xmpp', 'command', config.xmpp.admin, config.xmpp.admin, '!useradd '+config.xmpp.admin);

        },

        ////-----------------------------------------------------------------------------------------
        // IRC Message        
        onIRC = function(type) {
            switch(type) {
                
            case 'command':
            case 'message':
                var from = arguments[1],
                    to = arguments[2],
                    message = arguments[3];
                
                // From Chan
                if(to === config.irc.channel) {
                    pushXMPP(from+': '+message);
                }
                else {
                    events.emit('irc', 'say', from, 'I\'m sorry, no Priv MSG avalible');
                }
                break;
            case 'quit':
            case 'join':
            case 'part':
            case 'kick':
                var channel = arguments[1],
                    nick = arguments[2];
                pushXMPP('['+type+']'+nick);
                break;
            case 'nick':
                var oldnick = arguments[1],
                    newnick = arguments[2],
                    channel = arguments[3];
                pushXMPP('['+type+']From: '+oldnick+' To: '+newnick);
                break;
            case 'topic':
                var chanenel = arguments[1],
                    topic = arguments[2],
                    nick = arguments[3];
                pushXMPP('['+type+']'+topic);
                break;
            case 'names':
                var channel = arguments[1],
                    names = arguments[2];
                nicklist = names;
                break;
            }
        },
        
        ////-----------------------------------------------------------------------------------------
        // XMPP Message
        onXMPP = function(type) {
            switch(type) {
            case 'message':
                var from, to, message;
                if( arguments[1] !== undefined )
                    var from = arguments[1].split("/")[0];
                    
                if( arguments[2] !== undefined )
                    var to = arguments[2].split("/")[0];
                    
                if( arguments[3] !== undefined )
                    message = arguments[3];

                getUserByJID(from, function(key, user) {
                    if( user !== undefined ) {
                        var sender = from;
                        if( user.nick != undefined)
                            sender = user.nick;
                            
                        pushIRC(sender+': '+message, from);
                    }
                });
                
                break;
            case 'command':
                var from = arguments[1].split("/")[0],
                    to = arguments[2].split("/")[0],
                    command = arguments[3].substr(1);
                if( from === config.xmpp.admin ) {
                    var args = command.split(' ');
        
                    switch(args[0]) {
                    case 'deleteuserdata':
                        events.emit('store', 'remove', 'users');
                        events.emit('xmpp', 'send', from, '[USR]Deleted all users');
                        break;
                        
                    case 'useradd':
                        var jid = args[1];
                        getUserByJID(jid, function(key, user) {
                            if(user) {
                                events.emit('xmpp', 'send', from, '[USR]User already exists');
                            }
                            else {
                                events.emit('store', 'set', 'users.'+jidToIndex(jid), {"jid": jid});
                                events.emit('xmpp', 'send', from, '[USR]'+jid+' added');
                                events.emit('xmpp', 'subscribe', jid);
                            }
                        });
                        break;
                        
                    case 'userdel':
                        var jid = args[1];
                        getUserByJID(jid, function(key, user) {
                            if(user === undefined) {
                                events.emit('xmpp', 'send', from, '[USR]User does not exists');
                            }
                            else {
                                getUsers(function(users) {
                                    if( users !== undefined ) {
                                        for(var user in users) {
                                            if(users.hasOwnProperty(user)) {
                                                if( users[user].jid === jid ) {
                                                    users[user] = {};
                                                    delete users[user];
                                                    events.emit('xmpp', 
                                                                'send', 
                                                                from,
                                                                '[USR]'+jid+' deleted');
                                                    events.emit('xmpp', 'unsubscribe', jid);
                                                }
                                            }
                                        }
                                        setUsers(users);
                                    }
                                });
                            }
                        });
                        break;
                        
                    case 'userlist':
                        getUsers(function(users) {
                            var found = false;
                            for(var user in users) {
                                if(users.hasOwnProperty(user)) {
                                    found = true;
                                    events.emit('xmpp', 'send', from, '[USR]'+users[user].jid);    
                                }
                            }
                            if( !found )
                                events.emit('xmpp', 'send', from, '[USR] No Users');
                        }); 
                        break;
                    case 'userdb':
                        getUsers(function(users) {
                            events.emit('xmpp', 'send', from, '[USR]' + util.inspect(users));
                        }); 
                        break;                        
                    case 'usersonline':
                        events.emit('xmpp', 'send', from, util.inspect(onlineusers));
                        break;
                    //default:
                    //    events.emit('xmpp', 'send', from, 'Command not found');                        
                    //    break;
                    }
                }
                
                getUserByJID(from, function(key, user) {
                    var args = command.split(' ');

                    switch(args[0]) {
                    case 'join':
                        events.emit('store', 'set', 'users.'+key+'.listening', true);
                        pushIRC(from+' '+args[0]+'\'ed');
                        break;
                        
                    case 'part':
                        events.emit('store', 'set', 'users.'+key+'.listening', false);
                        pushIRC(from+' '+args[0]+'\'ed');
                        break;
                    
                    case 'nick':
                        var nick = args[1];
                        getUsers(function(users) {
                            var found = false;
                            for(var inuser in users) {
                                if(users.hasOwnProperty(inuser)) {    
                                    if( users[inuser].nick === nick )
                                        found = true;
                                }
                            }
                            
                            if(!found) {
                                events.emit('store', 'set', 'users.'+jidToIndex(from)+'.nick', nick);
                                events.emit('xmpp', 'send', from, 'Nick set to '+nick);
                            }
                            else {
                                events.emit('xmpp', 'send', from, 'Nick already taken!');
                            }
                        });
                        break;
                        
                    case 'names':
                        if(nicklist !== undefined) {
                            var nickstr = '';
                            for(nick in nicklist)
                                nickstr = nickstr+' '+nick;
                                
                            events.emit('xmpp', 'send', from, 'Names: '+nickstr);

                        }
                        break;
                    }
                });
                break;
                
            case 'presence':
                var from = arguments[1],
                    bare = arguments[1].split("/")[0],
                    to = arguments[1],
                    stanza = arguments[3];
                    
                getUserByJID(bare, function(key, user) {
                    if( user !== undefined ) {                  
                        var usrfound = false;
                        for( usr in onlineusers ) {
                            if( onlineusers.hasOwnProperty(usr) ) {
                                if( usr === jidToIndex(bare) ) {
                                    usrfound = true;
                                    var foundAt = -1;
                                    
                                    for( presence in onlineusers[usr] ) {
                                        if( onlineusers[usr].hasOwnProperty(presence) ) {
                                            if( onlineusers[usr][presence] === from ) {
                                                foundAt = presence;
                                            }
                                        }
                                    }
                                    if( stanza.name === 'presence' && foundAt == -1)
                                        onlineusers[usr].push(from);
                                    if( stanza.attrs.type === 'unavailable' && foundAt != -1 )
                                        onlineusers[usr].splice(foundAt, 1);
                                }
                            }
                        }
                        if(stanza.name === 'presence' && !usrfound) {
                            onlineusers[jidToIndex(bare)] = [];
                            onlineusers[jidToIndex(bare)].push(from);
                        }
                    }
                });
                break;
                
            case 'subscribe':
                var from = arguments[1].split("/")[0];
                getUserByJID(from, function(key, user) {
                    if( user !== undefined )
                        events.emit('xmpp', 'subscribed', from);
                });
                break;
                
            case 'unsubscribe':
                var from = arguments[1].split("/")[0];
                getUserByJID(from, function(key, user) {
                    if( user !== undefined )
                        events.emit('xmpp', 'unsubscribed', from);
                });
                break;
                
            }
        },
        
        ////-----------------------------------------------------------------------------------------
        // Send message from IRC to all Users
        pushXMPP = function(message, exclude) {
            if( message !== undefined ) {
                console.log(message);
                var now = Date.now();
                
                // Log
                events.emit('store', 'set', 'log'+'.'+now, message);
                
                // Get Users
                getUsers( function(users) {
                    for(var user in users) {
                        if(users.hasOwnProperty(user)) {
                            // Is Online and listening
                            if( exclude !== undefined ) {
                                if( users[user].jid === exclude ) {
                                    continue;
                                }
                            }
                            
                            if( users[user].listening  === true) {
                                //&& onlineusers[user].length > 0) {
    
                                events.emit('xmpp', 'send', users[user].jid, message);
                                users[user].last = now;
                            }
                        }                            
                    }
                });
            }
        },

        ////-----------------------------------------------------------------------------------------
        // Send message from IRC to all Users
        pushIRC = function(message, exclude) {
            events.emit('irc', 'say', config.irc.channel, message);
            pushXMPP(message, exclude);
        },
    
        ////-----------------------------------------------------------------------------------------
        // Return user object of the specified jid 
        getUserByJID = function(jid, callback) {
            events.emit('store', 'get', 'users', function(users) {
                var found = false;
                for(var user in users) {
                    if(users.hasOwnProperty(user)) {
                        if( users[user].jid === jid ) {   
                            found = true;
                            callback(user, users[user]);
                        }
                    } 
                }
                if( !found )
                    callback(undefined, undefined);
            });
        },
        
        ////-----------------------------------------------------------------------------------------
        // Return users object
        getUsers = function(callback) {
            events.emit('store', 'get', 'users', function(users) {
                if( users !== undefined )
                    callback(users);
                else
                    callback(undefined);
            });
        },

        ////-----------------------------------------------------------------------------------------
        // Store users object
        setUsers = function(users, callback) {
            if( users !== undefined ) {
                events.emit('store', 'remove', 'users', function() {
                    events.emit('store', 'set', 'users', users, function() {
                        if( callback )
                            callback();
                    });
                });
            }
        },
        
        jidToIndex = function(jid) {
            var jidarr = jid.split("."),
                index = '';
                
            for( var item in jidarr )
                index = index + jidarr[item];
                
            return index;
        },
        
        ////-----------------------------------------------------------------------------------------
        // Decide which function should handle the event
        onEvent = function(type) {
            var args = Array.prototype.slice.call(arguments, 1);
            
            try {
                switch(type) {
                }
            }
            catch( err )
            {
                events.emit('error', name, err);   
            }
        }

    ////=============================================================================================
    ;

    /////////////////////////////////////////////////////////////////////////////////////////////////

    init(_events, _config);
    
    /////////////////////////////////////////////////////////////////////////////////////////////////
}

