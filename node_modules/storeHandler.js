//###################################################################################################
// Create Function

exports.create = function(_config) {
    return new Handler(_config);
};

//###################################################################################################
// Basic Object
function Handler(_config) {
    /////////////////////////////////////////////////////////////////////////////////////////////////
   
    var 
    ////=============================================================================================
    // Requirements
        
        ueberDB = require('ueberDB'),
    
    ////=============================================================================================
    // Propertys
    
        self = this,
        db,
        config,
    
    ////=============================================================================================
    // Methods
    
        ////-----------------------------------------------------------------------------------------
        // Function
        init = function(_config) {
            
            if( _config !== undefined )
                config = _config;
            else
                console.error('[storeHandler] Options undefined');
            
            events.EventEmitter.call(this);
                        
            db = new ueberDB.database("sqlite", {filename:config.file});
            db.init(function(err) {
                if(err) {
                    console.error(err);
                } else {
                    ready();
                    self.emit('ready');
                }
            });
        },
        
        ready = function() {
            self.on('get', get);
            self.on('set', set);
            self.on('getSub', getSub);
            self.on('setSub', setSub);
            self.on('remove', remove);
        },
        
        get = function(name, callback) {
            db.get(name, function(err, value) {
                if(err)
                    console.log(err);
                else
                    callback(value);
            });
        },
        
        set = function(name, object) {
            db.set(name, object);
        },
        
        getSub = function(name, sub, callback) {
            db.getSub(name, sub, function(err, value) {
                if(err)
                    console.log(err);
                else
                    callback(value);
            });
        },
        
        setSub = function(name, sub, object, callback) {
            db.setSub(name, sub, object, function(err) {
                if(err)
                    console.log(err);
            });
        },
        
        remove = function(name, callback) {    
            db.remove(name, callback);
        }

    ////=============================================================================================
    ;

    /////////////////////////////////////////////////////////////////////////////////////////////////

    init(_config);
    
    /////////////////////////////////////////////////////////////////////////////////////////////////
}

//###################################################################################################
// Inherit from EventEmitter

events = require('events');
Handler.super_ = events.EventEmitter;
Handler.prototype = Object.create(events.EventEmitter.prototype, {
    constructor: {
        value: Handler,
        enumerable: false
    }   
});
