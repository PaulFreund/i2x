//###################################################################################################
// Store Handler
/*
    Events:
    
    - ready         ()                          : Storage ready
    
    Commands;
    
    - get           (path, callback)            : Authorize somebody
    - set           (path, object, callback)    : Send message to somebody 
    - remove        (name, callback)            : Remove somebody
    
*/

//###################################################################################################
// Create Function

exports.create = function(_config) {
    return new Handler(_config);
};

//###################################################################################################
// Basic Object
function Handler(_config) {
    /////////////////////////////////////////////////////////////////////////////////////////////////
   
    var 
    ////=============================================================================================
    // Requirements

        ueberDB = require('ueberDB'),
    
    ////=============================================================================================
    // Propertys
    
        self = this,
        db,
        config,
    
    ////=============================================================================================
    // Methods
    
        ////-----------------------------------------------------------------------------------------
        // Initialize
        init = function(_config) {
            
            if( _config !== undefined )
                config = _config;
            else
                console.error('[storeHandler] Options undefined');
            
            events.EventEmitter.call(this);
                        
            db = new ueberDB.database("sqlite", {filename:config.file});
            db.init(function(err) {
                if(err) {
                    console.error(err);
                } else {
                    ready();
                    self.emit('ready');
                }
            });
        },
        
        ////-----------------------------------------------------------------------------------------
        // Ready
        ready = function() {
            self.on('get', get);
            self.on('set', set);
            self.on('remove', remove);
        },
        
        ////-----------------------------------------------------------------------------------------
        // Get an object ( or subobject )
        get = function(path, callback) {
            var sub = path.split('.');
            
            if( sub.length > 0) {
                
                if( sub.length < 1) {
                    db.get(sub[0], function(err, value) {
                        if(err) {
                            console.log('storeHandler.get: '+err);
                            callback(undefined);
                        }
                        else {
                            callback(value);
                        }
                    });
                } 
                else {
                    db.getSub(sub[0], sub.slice(1), function(err, value) {
                        if(err) {
                            console.log('storeHandler.get: '+err);
                            callback(undefined);
                        }
                        else {
                            callback(value);
                        }
                    });
                }
            }
        },
        
        ////-----------------------------------------------------------------------------------------
        // Set an object ( or an subobjecct )
        set = function(path, object, callback) {
            var sub = path.split('.');
            
            if( sub.length > 0) {
                
                if( sub.length < 2) {
                    db.set(sub[0], object);
                }
                else {
                    db.get(sub[0], function(err, data) {
                        if(!data || err) {
                            db.set(sub[0], {}, function(err) {
                                var subpath = sub.slice(1);
        
                                db.setSub(sub[0], subpath, object, function(err) {
                                    if(err)
                                        console.log('storeHandler.set: '+err);
                                    
                                    if( callback )
                                        callback(err);
                                });    
                            });
                        }
                        else {
                    
                            var subpath = sub.slice(1);
    
                            db.setSub(sub[0], subpath, object, function(err) {
                                if(err)
                                    console.log('storeHandler.set: '+err);
                                
                                if( callback )
                                    callback(err);
                            });           
                        }
                    });
                }
            }
        },
        
        ////-----------------------------------------------------------------------------------------
        // Remove an object
        remove = function(name, callback) {
            db.remove(name, callback);
        }


    ////=============================================================================================
    ;

    /////////////////////////////////////////////////////////////////////////////////////////////////

    init(_config);
    
    /////////////////////////////////////////////////////////////////////////////////////////////////
}

//###################################################################################################
// Inherit from EventEmitter

events = require('events');
Handler.super_ = events.EventEmitter;
Handler.prototype = Object.create(events.EventEmitter.prototype, {
    constructor: {
        value: Handler,
        enumerable: false
    }   
});
