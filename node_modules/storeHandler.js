//###################################################################################################
// Create Function

exports.create = function(_events, _config) {
    return new Handler(_events, _config);
};

//###################################################################################################
// Basic Object
function Handler(_events, _config) {
    /////////////////////////////////////////////////////////////////////////////////////////////////
   
    var 
    ////=============================================================================================
    // Requirements

        ueberDB = require('ueberDB'),
        util = require('util'),
    
    ////=============================================================================================
    // Propertys
    
        name = 'store',
        self = this,
        events, 
        db,
        config,
    
    ////=============================================================================================
    // Methods
    
        ////-----------------------------------------------------------------------------------------
        // Initialize
        init = function(_events, _config) {
            if( _events !== undefined )
                events = _events;
            else
                console.error('['+name+']EventEmitter undefined');
            
            if( _config !== undefined )
                config = _config;
            else
                events.emit('error', name, 'Options undefined');
                        
            db = new ueberDB.database("sqlite", {filename:config.file});
            db.init(function(err) {
                if(err) {
                    events.emit('error', 'store', 'Cant Init', err);
                } else {
                    events.on(name, onEvent);
                    events.emit('store', 'ready');
                }
            });
        },
                
        ////-----------------------------------------------------------------------------------------
        // Decide which function should handle the event
        onEvent = function(type) {
            try {
                var args = Array.prototype.slice.call(arguments, 1);
            
                switch(type) {
                case 'get':
                    get.apply(this, args);
                    break;
                case 'set':
                    set.apply(this, args);
                    break;
                case 'remove':
                    remove.apply(this, args);
                    break;
                }
            }
            catch( err )
            {
                console.log('STORE: '+util.inspect(err));   
            }
        },

        ////-----------------------------------------------------------------------------------------
        // Get an object ( or subobject )
        get = function(path, callback) {
            var sub = path.split('.');
            
            if( sub.length > 0) {
                
                if( sub.length < 1) {
                    db.get(sub[0], function(err, value) {
                        if(err) {
                            console.log('storeHandler.get: '+err);
                            callback(undefined);
                        }
                        else {
                            callback(value);
                        }
                    });
                } 
                else {
                    db.getSub(sub[0], sub.slice(1), function(err, value) {
                        if(err) {
                            console.log('storeHandler.get: '+err);
                            callback(undefined);
                        }
                        else {
                            callback(value);
                        }
                    });
                }
            }
        },
        
        ////-----------------------------------------------------------------------------------------
        // Set an object ( or an subobjecct )
        set = function(path, object, callback) {
            var sub = path.split('.');
            
            if( sub.length > 0) {
                
                if( sub.length < 2) {
                    db.set(sub[0], object);
                }
                else {
                    db.get(sub[0], function(err, data) {
                        if(!data || err) {
                            db.set(sub[0], {}, function(err) {
                                var subpath = sub.slice(1);
        
                                db.setSub(sub[0], subpath, object, function(err) {
                                    if(err)
                                        console.log('storeHandler.set: '+err);
                                    
                                    if( callback )
                                        callback(err);
                                });    
                            });
                        }
                        else {
                    
                            var subpath = sub.slice(1);
    
                            db.setSub(sub[0], subpath, object, function(err) {
                                if(err)
                                    console.log('storeHandler.set: '+err);
                                
                                if( callback )
                                    callback(err);
                            });           
                        }
                    });
                }
            }
        },
        
        ////-----------------------------------------------------------------------------------------
        // Remove an object
        remove = function(name, callback) {
            db.remove(name, callback);
        }


    ////=============================================================================================
    ;

    /////////////////////////////////////////////////////////////////////////////////////////////////

    init(_events, _config);
    
    /////////////////////////////////////////////////////////////////////////////////////////////////
}
