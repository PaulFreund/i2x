//###################################################################################################
// Create Function

module.exports.create = function(_events, _config) {
    return new Handler(_events, _config);
};

//###################################################################################################
// Basic Object
function Handler(_events, _config) {
    /////////////////////////////////////////////////////////////////////////////////////////////////
   
    var 
    ////=============================================================================================
    // Requirements
        
        util = require('util'),
        fs = require('fs'),
    
    ////=============================================================================================
    // Propertys
    
        name = 'log',
        self = this,
        config,
        events,
    
    ////=============================================================================================
    // Methods
    
        ////-----------------------------------------------------------------------------------------
        // Initializet
        init = function(_events, _config) {
            if( _events !== undefined )
                events = _events;
            else
                console.error('['+name+']EventEmitter undefined');
            
            if( _config !== undefined )
                config = _config;
            else
                events.emit('error', name, 'Options undefined');
                        
            fs.mkdir(config.folder, 0777);
                        
            events.on('error', onError);
            events.on(name, onEvent);
            
            
        },
        
        ////-----------------------------------------------------------------------------------------
        // Decide which function should handle the event
        onEvent = function(type) {
            var args = Array.prototype.slice.call(arguments, 1);
            var date = args[0],
                message = args[1];
                
            try {
                switch(type) {
                case 'message':
                    logString(date, message);
                    break;
                case 'error':
                    logString(Date.now(), util.inspect(message));
                    break;
                }
            }
            catch( err )
            {
                events.emit('error', name, err);   
            }
        },

        onError = function(err) {
            events.emit('log', 'error', err);
        },
        
        logString = function(date, message) {
            var dateObj = new Date(date),
                day = dateObj.getFullYear()+'-'+dateObj.getMonth()+'-'+dateObj.getDate(),
                dayFile = config.folder+'/'+day+'.htm';
                
                fs.open(dayFile, 'a', 0777, function( e, fd ) {
                    if( !e ) {
                        fs.write(fd, '<span id="'+date+'">'+message+'</span><br />\n', null, 'utf8', function() {
                            fs.close(fd);
                        });
                    }
                });
            
        }

    ////=============================================================================================
    ;

    /////////////////////////////////////////////////////////////////////////////////////////////////

    init(_events, _config);
    
    /////////////////////////////////////////////////////////////////////////////////////////////////
}

